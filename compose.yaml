# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # production-front-end:
  #   build:
  #     context: ./front-end 
  #     dockerfile: Dockerfile
  #   environment:
  #     NODE_ENV: production
  #     VITE_EMAILJS_SERVICE: service_51ykf37 
  #     VITE_EMAILJS_BASE_TEMPLATE: template_1odkprn
  #     VITE_EMAILJS_ORDER_TEMPLATE: template_ge0nhp2
  #     VITE_EMAILJS_PUB_KEY: X9wlfZBxdmv53pCu5
  #   ports:
  #     - 3000:3000
  dev-front-end:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5173:5173
    environment:
      NODE_ENV: development
      VITE_EMAILJS_SERVICE: service_49mn7mg
      VITE_EMAILJS_BASE_TEMPLATE: template_eqvxrrl
      VITE_EMAILJS_ORDER_TEMPLATE: template_4tuehxb
      VITE_EMAILJS_PUB_KEY: FY8zGK7A9e9L2XImB
    develop:
      watch:
      - action: sync
      - path: ./
        target: /usr/src/app
        ignore:
           - node_modules/
      - action: rebuild
      -  path: ./package.json
    
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

